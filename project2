import pandas as pd

def demographic_data_analyzer():
    # Read the dataset
    df = pd.read_csv("adult.data", header=None, names=[
        "age", "workclass", "fnlwgt", "education", "education-num", "marital-status",
        "occupation", "relationship", "race", "sex", "capital-gain", "capital-loss",
        "hours-per-week", "native-country", "salary"
    ])
    
    # 1. Count of people by race
    race_count = df["race"].value_counts()

    # 2. Average age of men
    average_age_men = round(df[df["sex"] == "Male"]["age"].mean(), 1)

    # 3. Percentage of people with a Bachelor's degree
    percentage_bachelors = round((df["education"] == "Bachelors").mean() * 100, 1)

    # 4. Percentage of people with advanced education earning >50K
    advanced_edu = df["education"].isin(["Bachelors", "Masters", "Doctorate"])
    higher_education_rich = round((df[advanced_edu]["salary"] == ">50K").mean() * 100, 1)

    # 5. Percentage of people without advanced education earning >50K
    lower_education_rich = round((df[~advanced_edu]["salary"] == ">50K").mean() * 100, 1)

    # 6. Minimum hours per week a person works
    min_work_hours = df["hours-per-week"].min()

    # 7. Percentage of people working minimum hours per week earning >50K
    min_workers = df["hours-per-week"] == min_work_hours
    rich_percentage = round((df[min_workers]["salary"] == ">50K").mean() * 100, 1)

    # 8. Country with highest percentage of >50K earners
    high_earners_by_country = df[df["salary"] == ">50K"]["native-country"].value_counts()
    total_by_country = df["native-country"].value_counts()
    highest_earning_country = (high_earners_by_country / total_by_country * 100).idxmax()
    highest_earning_country_percentage = round((high_earners_by_country / total_by_country * 100).max(), 1)

    # 9. Most common occupation for >50K earners in India
    top_IN_occupation = df[(df["native-country"] == "India") & (df["salary"] == ">50K")]["occupation"].mode()[0]

    # Return the results as a dictionary
    return {
        "race_count": race_count,
        "average_age_men": average_age_men,
        "percentage_bachelors": percentage_bachelors,
        "higher_education_rich": higher_education_rich,
        "lower_education_rich": lower_education_rich,
        "min_work_hours": min_work_hours,
        "rich_percentage": rich_percentage,
        "highest_earning_country": highest_earning_country,
        "highest_earning_country_percentage": highest_earning_country_percentage,
        "top_IN_occupation": top_IN_occupation
    }
